ACKNOWLEDGEMENTS
================
First, special thanks for the idea and some starter code to:
http://robinelvin.wordpress.com/2009/09/04/saml-with-django/

PRE-REQUISITES
==============
To use the "saml2idp" app, you must download and install these libraries:
- M2Crypto @ http://chandlerproject.org/bin/view/Projects/MeTooCrypto
- PySAML @ http://github.com/tachang/PySAML
- python-lasso (Python Bindings for LASSO)

UBUNTU Packages
===============
M2Crypto is also available as a system package for Ubuntu (at least on 9.10).
The name is 'python-m2crypto'. You can use the "Synaptic Package Manager" or
the "apt-get" command-line program to install it.

FOR PRE-EXISTING PROJECTS
=========================
For existing projects, you will also need to:
- Enable the Django auth system. (http://docs.djangoproject.com/en/dev/topics/auth/)
- If you haven't set up login templates, you can just reuse the ones from this
  project under "templates/registration".
- Download and install the "saml2idp" app from this project site.
- Add 'saml2idp' to the INSTALLED_APPS list in settings.py.
- Add this line to your top-level urlpatterns (in urls.py usually):

    urlpatterns = patterns('',
    ...
        (r'^idp/', include('saml2idp.urls')),
    ...
    )

FOR THE INCLUDED SAMPLE PROJECT
===============================
This project comes with a working sample Django project called "idptest".
You can download it and run it as-is, using standard Django commands:

$ cd path/to/idptest
$ python manage.py syncdb
$ python manage.py runserver

OpenSSL Key and Certificate Files
=================================
OpenSSL signing requires creation of a key and a certificate file. The "keys"
folder contains the "mk_keys.sh" Bash Script, which will walk you through the
process.  (Sorry, I don't have any help for non-linux users, but I would be
happy to include it, if someone contributes it.)

You can turn on the "signing" feature by adding this entry to your settings.py:

    SAML2IDP_SIGNING = True
    SAML2IDP_PRIVATE_KEY_FILE = '/absolute/path/to/private-key.pem'
    SAML2IDP_CERTIFICATE_FILE = '/absolute/path/to/certificate.pem'

When signing is enabled, the "saml2idp" views will be signed with the key and
the certificate; in other words, this Identity Provider will identify itself
much more securely.

INTEGRATION WITH django-saml2-sp
================================
A reference Service Point has been implementated in the django-saml2-sp project
at http://code.google.com/p/django-saml2-sp/. (Or will be soon.)

You can run that sample project at the same time as the sample project here.
You can even run them using Django's built-in test server, like this:

In the first terminal window:
$ cd path/to/idptest/
$ python manage.py syncdb
    NOTE: Don't forget to create a user account, which you will use to login.
$ python manage.py runserver 8000

In the second terminal window:
$ cd path/to/sptest/
$ python manage.py syncdb
    NOTE: Create a different user account, so it doesn't conflict with the other.
$ python manage.py runserver 9000

You can browse to the Service Point @ http://127.0.0.1:9000/ to get the flow
started. Make sure to watch the output in each window, to see the order of
message flow.
